{
    "sourceFile": "public/_/js/bn.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1739938519490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739938802440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,8 +472,15 @@\n \n \t\n \t\t\tif (evidenceNodeTitle && focusEvidenceNode.classList.contains(\"hasEvidence\")) {  \n \t\t\t\tconsole.log('evidenceNodeTitle', evidenceNodeTitle);\n+\n+\t\t\t\tif (!focusEvidenceNode.classList.contains(\"hasEvidence\")) {\n+\t\t\t\t\tconsole.log(\"❌ 该节点没有 evidence，PlayButton 不显示！\");\n+\t\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n+\t\t\t\t\treturn; \n+\t\t\t\t}\n+\n \t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n \t\t\n \t\t\t\tconst playButton = document.createElement(\"button\");\n \t\t\t\tplayButton.textContent = \"▶\";\n"
                },
                {
                    "date": 1739938838818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,13 +473,8 @@\n \t\n \t\t\tif (evidenceNodeTitle && focusEvidenceNode.classList.contains(\"hasEvidence\")) {  \n \t\t\t\tconsole.log('evidenceNodeTitle', evidenceNodeTitle);\n \n-\t\t\t\tif (!focusEvidenceNode.classList.contains(\"hasEvidence\")) {\n-\t\t\t\t\tconsole.log(\"❌ 该节点没有 evidence，PlayButton 不显示！\");\n-\t\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n-\t\t\t\t\treturn; \n-\t\t\t\t}\n \n \t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n \t\t\n \t\t\t\tconst playButton = document.createElement(\"button\");\n"
                },
                {
                    "date": 1739939009646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -509,9 +509,8 @@\n \t\t\n \t\t\t\tconst node = refs.Node(focusEvidenceNode);\n \t\t\t\tnode.bn.update();                                                                 \n \t\t\t} else {\n-\n \t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n \t\t\t}\n \t\t\t\t\t\n \t\t\t\n"
                },
                {
                    "date": 1739939078211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,10 +419,9 @@\n \t\tbn.focusEvidence = nodeElement.dataset.name;\n \t}\n \n \tstatic moveFocusEvidence(nodeElement,bn){\n-\n-\t\tnodeElement.classList.remove(\"focusEvidence\");\t\t\n+\t\n \t\tbn.focusEvidence = nodeElement.dataset.name;\n \t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n \n \n"
                },
                {
                    "date": 1739939106572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,9 +414,8 @@\n \n \n \n \tstatic setFocusEvidence(nodeElement, bn) {\n-\t\tnodeElement.classList.add(\"focusEvidence\");\t\t\n \t\tbn.focusEvidence = nodeElement.dataset.name;\n \t}\n \n \tstatic moveFocusEvidence(nodeElement,bn){\n"
                },
                {
                    "date": 1739939212064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,8 +344,9 @@\n \n \t\tallStateElem.forEach((elem) => {\n \t\t\telem.style.backgroundColor = \"\";\n \t\t});\n+\t\t\n \t\tnodeEl.style.boxShadow = \"\";\n \n \t\tif (nodeName in bn.evidence && bn.evidence[nodeName] == stateIndex) {\n \t\t\t//delete bn.evidence[nodeName];\n"
                },
                {
                    "date": 1739939389418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,9 @@\n \n \t\tallStateElem.forEach((elem) => {\n \t\t\telem.style.backgroundColor = \"\";\n \t\t});\n-\t\t\n+\n \t\tnodeEl.style.boxShadow = \"\";\n \n \t\tif (nodeName in bn.evidence && bn.evidence[nodeName] == stateIndex) {\n \t\t\t//delete bn.evidence[nodeName];\n@@ -504,8 +504,11 @@\n \t\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n \t\t\t\t\tNode.moveFocusEvidence(focusEvidenceNode, bn);\n \t\t\t\t\tbn.update();\n \t\t\t\t}\n+\t\t\t\tif (focusEvidenceNode.classList.contains(\"hasEvidence\")) {\n+\t\t\t\t\tdocument.body.appendChild(playButton);\n+\t\t\t\t}\n \t\t\n \t\t\t\tconst node = refs.Node(focusEvidenceNode);\n \t\t\t\tnode.bn.update();                                                                 \n \t\t\t} else {\n"
                },
                {
                    "date": 1739939645396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -469,9 +469,9 @@\n \t\t\t\t});\n \t\t\t});\n \n \t\t\tif (!evidenceNodeTitle) { \n-\t\t\t\tif (!bn.isFrozen) {  // 🚀 **如果不是 Frozen Mode，才移除 PlayButton**\n+\t\t\t\tif (!bn.isFrozen) {  \n \t\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n \t\t\t\t}\n \t\t\t\treturn;\n \t\t\t}\n"
                }
            ],
            "date": 1739938519490,
            "name": "Commit-0",
            "content": "var refs = {};\n\nvar bn = {\n\tguiEnabled: true,\n\tnodes: {},\n\tevidence: {},\n\t/// For now, only 1 node can be in a given role, and only 1 state of the node be selected\n\troles: {},\n\tselectedStates: {},\n\tbeliefs: {},\n\tactivePaths: {},\n\tcolliders: {},\n\tciTableEnabled: false,\n\tfocusEvidence: null,\n\tdragFunc:true,\n\tshowMenu:null,\n\tverbal:null,\n\tdetail:false,\n\tclassifiedPaths: null,\n\t\n\tdrawArcs() {\n\t\tlet bnView = document.querySelector('.bnView');\n\t\tfor (let node of bn.model) {\n\t\t\tfor (let parentName of node.parents) {\n\t\t\t\tlet from = document.querySelector(`.node[data-name=${parentName}]`);\n\t\t\t\tlet to = document.querySelector(`.node[data-name=${node.name}]`);\n\t\t\t\t//debugger;\n\t\t\t\tdraw.drawArrowBetweenEls(bnView, from, to, {parent: parentName, child: node.name});\n\t\t\t}\n\t\t}\n\t},\n\tgetNode(nodeName) {\n\t\tif (!(nodeName in this.nodes)) {\n\t\t\tthis.nodes[nodeName] = new Node(this, nodeName);\n\t\t}\n\n\t\treturn this.nodes[nodeName];\n\t},\n\tgui(method, ...args) {\n\t\tif (this.guiEnabled) {\n\t\t\tthis['gui'+method](...args);\n\t\t}\n\t},\n\tinitialize() {\n        const urlParams = new URLSearchParams(window.location.search);\n        this.limitedMode = urlParams.get('limitedmode') === 'true';\n\t\tthis.MenuDisplay = urlParams.get('showmenu') === 'false';\n\t\tthis.verbalMode = urlParams.get('verbal') === 'false';\n\t\tthis.animationMode = urlParams.get('animation') === 'false';\n\t\t// limited mode\n        if (this.limitedMode) {\n            this.enableLimitedMode(); \n        }\n\t\telse{\n            this.disableLimitedMode(); \n\t\t}\n\t\t// menu Dispaly\n\t\tif (this.MenuDisplay) {\n\t\t\tShowMenu = false\n            console.log(\"Menu disbaled\");\n\n        }\n\t\telse{\n            console.log(\"Menu abled\");\n\t\t\tShowMenu = true\n\t\t}\n\t\n\t\t// verbal mode\n\t\tif (this.verbalMode) {\n\t\t\tverbal = false\n            console.log(\"Verbal mode disabled\");\n\n        }\n\t\telse{\n            console.log(\"Verbal mode enabled\");\n\t\t\tverbal = true\n\t\t}\n\n\t\t// animaton mode\n\t\tif (this.animationMode) {\n\t\t\twindow.animation = false\n            console.log(\"Animation mode disbaled\");\n\n        }\n\t\telse{\n            console.log(\"Animation mode enabaled\");\n\t\t\twindow.animation = true\n\t\t}\n\n    },\n\n    enableLimitedMode() {\n        console.log(\"Limited mode\");\n\t\tdragFunc = false\n    },\n\tdisableLimitedMode() {\n        console.log(\"Func mode\");\n\t\tdragFunc = true\n    },\n\n\t\n\tasync update(evidence = {}) {\n\t\t// console.log('-----------bn.js evidence:', evidence);\n\t\t// console.log('-----------Object.entries():', Object.entries());\n\t\tfor (let [k,v] of Object.entries(evidence)) {\n\t\t\tif (v === null) {\n\t\t\t\tdelete this.evidence[k];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.evidence[k] = v;\n\t\t\t}\n\t\t}\n\t\t/// We can run this in parallel\n\t\t/// er, not quite yet...\n\t\tawait (async _=>{\n\t\t\tlet reqData;\n\n\t\t\tif (this.calculateTargetChange) {\t\t\t\t\t\t\t\t\t\t\n\t\t\t\treqData = await (await fetch(window.location.href + '&requestType=data&returnType=targetInfluence&evidence='+JSON.stringify(this.evidence)+'&roles='+JSON.stringify(this.roles)+'&selectedStates='+JSON.stringify(this.selectedStates)+'&focusEvidence='+this.focusEvidence)).json();\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t\treqData = await (await fetch(window.location.href + '&requestType=data&returnType=beliefs&evidence='+JSON.stringify(this.evidence)+'&roles='+JSON.stringify(this.roles)+'&selectedStates='+JSON.stringify(this.selectedStates))).json();\n\t\t\t//let nodeBeliefs = {};\n\t\t\t// console.log('reqData:', reqData)\n\t\t\tif (reqData.model) {\n\t\t\t\tfor (let node of reqData.model) {\n\t\t\t\t\tthis.beliefs[node.name] = node.beliefs;\n\t\t\t\t}\n\t\t\t\tthis.measureResults = reqData.measureResults;\n\t\t\t\tif (reqData.influences) {\n\t\t\t\t\tthis.influences = reqData.influences;\n\t\t\t\t\tthis.arcInfluence = reqData.arcInfluence;\n\t\t\t\t\t// console.log('reqData.arcInfluence:', reqData.arcInfluence);\n\t\t\t\t\t// console.log('reqData.activePaths:', reqData.activePaths);\n\t\t\t\t\tconsole.log('reqData.colliders:', reqData.colliders);\n\t\t\t\t\tthis.colliders = reqData.colliders;\n\t\t\t\t\tthis.activePaths = reqData.activePaths;\n\t\t\t\t\tthis.classifiedPaths = reqData.classifiedPaths;\n\t\t\t\t\tconsole.log('reqData.classifiedPaths:', reqData.classifiedPaths);\n\t\t\t\t} else {\n\t\t\t\t\tthis.influences = {};\n\t\t\t\t}\n\t\t\t\tthis.gui('Update');\n\t\t\t}\n\t\t})();\n\t\tthis.guiUpdateInfoWindows();\n\t},\n\t\n\tasync guiUpdate() {\n\t\tbnDetail.$handleUpdate({nodeBeliefs: this.beliefs, influences: this.influences, arcInfluence: this.arcInfluence, origModel:this.model, activePaths: this.activePaths, colliders: this.colliders, classifiedPaths: this.classifiedPaths, focusEvidence: this.focusEvidence, selectedStates: this.selectedStates});\n\t},\n\n\tguiUpdateInfoWindows() {\n\t\tq('div.infoWindow')?.remove();\n\t\tthis.ciTableEnabled = !!this.roles?.effect?.length;\n\t\tif (!this.ciTableEnabled)  q('div.ciTableWindow')?.remove();\n\t\tconsole.log(this.roles?.cause?.length, this.roles?.effect?.length);\n\t\tif (this.roles?.cause?.length && this.roles?.effect?.length) {\n\t\t\tlet causes = this.roles.cause;\n\t\t\tlet causeStates = causes.map(cause => this.selectedStates[cause] && this.getNode(cause).model.states[this.selectedStates[cause]]);\n\t\t\tlet effect = this.roles.effect[0];\n\t\t\tlet effectState = this.selectedStates[effect] && this.getNode(effect).model.states[this.selectedStates[effect]];\n\t\t\tq('.infoWindows .tip').after(n('div.infoWindow',\n\t\t\t\tn('h2', 'Measures'),\n\t\t\t\tn('div.info.infoContent',\n\t\t\t\t\tn('div.field',\n\t\t\t\t\t\tn('label', `Cause${causes.length>1 ? 's' : ''}:`),\n\t\t\t\t\t\tn('span.causes',\n\t\t\t\t\t\t\tcauses.map((cause,i) => n('span.cause', cause, causeStates[i] ? `=${causeStates[i]}` : '')),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t\tn('div.field',\n\t\t\t\t\t\tn('label', 'Effect:'),\n\t\t\t\t\t\tn('span.effect', effect, effectState ? `=${effectState}` : ''),\n\t\t\t\t\t),\n\t\t\t\t\tObject.values(this.measureResults).map(measure => n('div.field', {title: measure.tooltip},\n\t\t\t\t\t\tn('label', measure.title+':'),\n\t\t\t\t\t\tn('span.value', isNaN(measure.value) ? measure.value : Math.round(measure.value*10000)/10000,\n\t\t\t\t\t\t\tmeasure.percent ? n('span.percent', ' (', Math.round(measure.percent*1000)/10, '%)') : '',\n\t\t\t\t\t\t\tmeasure.extraInfo ? n('span.extraInfo', measure.extraInfo) : ''),\n\t\t\t\t\t)),\n\t\t\t\t),\n\t\t\t));\n\t\t}\n\t\telse {\n\t\t\t\n\t\t}\n\t\t\n\t\tif (this.roles?.effect?.length && !q('.ciTableWindow')) {\n\t\t\tq('.infoWindows').append(\n\t\t\t\tn('div.ciTableWindow',\n\t\t\t\t\t/*n('div.showTable',\n\t\t\t\t\t\tn('button.showCiTable', 'Show CI Table', {on: {click: event => {\n\t\t\t\t\t\t\tif (event.target.textContent == 'Show CI Table') {\n\t\t\t\t\t\t\t\tthis.ciTableEnabled = true;\n\t\t\t\t\t\t\t\tthis.showCiTable();\n\t\t\t\t\t\t\t\tevent.target.textContent = 'Hide CI Table';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.ciTableEnabled = false;\n\t\t\t\t\t\t\t\tthis.hideCiTable();\n\t\t\t\t\t\t\t\tevent.target.textContent = 'Show CI Table';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}}),\n\t\t\t\t\t),*/\n\t\t\t\t\tn('h2', 'Causal Information Table'),\n\t\t\t\t\tn('div.ciTable.infoContent'),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\t\n\t\tif (this.ciTableEnabled) {\n\t\t\tthis.showCiTable();\n\t\t}\n\t\telse {\n\t\t\tthis.hideCiTable();\n\t\t}\n\t},\n\t\n\tasync showCiTable() {\n\t\tq('.ciTable').append(n('div.loadingTable', 'Loading table...'));\n\t\tlet reqData = await (await fetch(window.location.href + '&requestType=data&returnType=ciTable&evidence='+JSON.stringify(this.evidence)+'&roles='+JSON.stringify(this.roles)+'&selectedStates='+JSON.stringify(this.selectedStates))).json();\n\t\tq('.ciTable table')?.remove();\n\t\tq('.ciTable .loadingTable')?.remove();\n\t\tlet table = n('table', n('tr', ['Variable', 'MI', 'CI', '%'].map(s => n('th', s))));\n\t\tfor (let row of reqData.ciTable) {\n\t\t\tlet rowClass = (this.roles?.cause ?? []).includes(row.cause) ? 'cause' :\n\t\t\t\trow.cause == this.roles?.effect ? 'effect': '';\n\t\t\tlet roundedPercent = Math.round(row.percent*1000)/10;\n\t\t\ttable.append(n('tr', {class: rowClass},\n\t\t\t\tn('td', row.cause),\n\t\t\t\tn('td', Math.round(row.mi*10000)/10000),\n\t\t\t\tn('td', Math.round(row.value*10000)/10000),\n\t\t\t\tn('td.percentBar', {style: `--percent-bar: ${row.percent*100}%`}, roundedPercent),\n\t\t\t));\n\t\t\tlet nodeEl = q(`.node[data-name=\"${row.cause}\"]`);\n\t\t\tnodeEl.style.setProperty('--strength', ((100 - row.percent*100)/2 + 50) + '%');\n\t\t\tnodeEl.classList.add('filled');\n\t\t\tnodeEl.querySelector('div.strength')?.remove();\n\t\t\tnodeEl.append(n('div.strength', roundedPercent+'%'));\n\t\t}\n\t\tq('.ciTable').append(table);\n\t},\n\t\n\thideCiTable() {\n\t\tqa('.filled').forEach(n => {\n\t\t\tn.classList.remove('filled');\n\t\t\tn.querySelector('div.strength')?.remove();\n\t\t});\n\t\tq('div.ciTable table')?.remove();\n\t},\n};\n\n/// Get node from el\nrefs.Node = function(el) {\n\tlet nodeName = el.closest('.node').dataset.name;\n\treturn bn.getNode(nodeName);\n}\n\nclass Node {\n\tconstructor(bn, nodeName) {\n\t\tthis.bn = bn;\n\t\tthis.nodeName = nodeName;\n\t\tthis.role = null;\n\t\tthis.guiEnabled = true;\n\t\tthis.model = bn.model.find(n => n.name == nodeName);\n\t}\n\t\n\tel() {\n\t\treturn q(`.node[data-name=\"${this.nodeName}\"]`).raw;\n\t}\n\tgui(method, ...args) {\n\t\tif (this.guiEnabled) {\n\t\t\tthis['gui'+method](...args);\n\t\t}\n\t}\n\t\n\tsetRole(role) {\n\t\tif (role == this.role)  return;\n\t\t\n\t\t/// Make sure any other node with this role is cleared, and their selected states cleared\n\t\t/// Just for effects now. Causes can conjoin.\n\t\tif (role != 'cause' && this.bn.roles[role]) {\n\t\t\tthis.bn.roles[role].forEach(nodeName => this.bn.nodes[nodeName].setRole(null));\n\t\t}\n\t\t\n\t\t/// Delete current role if present\n\t\tif (this.role) {\n\t\t\tlet i = this.bn.roles[this.role].indexOf(this.nodeName);\n\t\t\tif (i > -1)  this.bn.roles[this.role].splice(i, 1);\n\t\t\tdelete this.bn.selectedStates[this.nodeName];\n\t\t}\n\t\t\n\t\tthis.role = role;\n\t\tif (role) {\n\t\t\tif (!this.bn.roles[role])  this.bn.roles[role] = [];\n\t\t\tthis.bn.roles[role].push(this.nodeName);\n\t\t}\n\t\tthis.gui('SetRole');\n\t}\n\tguiSetRole() {\n\t\tlet removedCause = this.el().dataset.role == 'cause' && this.role != 'cause';\n\t\tif (this.role) {\n\t\t\tthis.el().dataset.role = this.role;\n\t\t}\n\t\telse {\n\t\t\t//onsole.log(this.el().dataset.role);\n\t\t\tdelete this.el().dataset.role;\n\t\t}\n\t\t/// Update selected states\n\t\tlet selStates = this.bn.selectedStates[this.nodeName] || [];\n\t\tthis.el().querySelectorAll('.target input').forEach((inp,i) => inp.checked = selStates.includes(i));\t\t\n\t\n\t\tNode.reset();  // **调用 reset() 方法**his.bn.gui('UpdateInfoWindows');\n\t\t/// Update view\n\t\tthis.el().querySelectorAll('.setCause, .setEffect').forEach(e => e.classList.remove('on'));\n\t\tif (this.role) {\n\t\t\tthis.el().querySelector(`.set${this.role.replace(/./, s=>s.toUpperCase())}`).classList.toggle('on');\n\t\t}\n\t\t\n\t\tif (this.role == 'cause' || removedCause) {\n\t\t\t/// Since arcs track from/to els, run through arcs to find incoming arcs\n\t\t\tlet myEl = this.el();\n\t\t\tlet matchedArcs = [];\n\t\t\t$(this.el().closest('.bnView')).find('path[data-can-redraw]').each(function() {\n\t\t\t\tvar {outputEl, fromEl, toEl} = $(this).data('redraw');\n\t\t\t\tif (toEl == myEl) {\n\t\t\t\t\tmatchedArcs.push(this);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (let arc of matchedArcs) {\n\t\t\t\t$(arc).data('opts').isBlocked = !removedCause;\n\t\t\t}\n\t\t\t/// Update with something more efficient\n\t\t\tdraw.updateArrows(document.querySelector('.bnView'));\n\t\t}\n\t}\n\t\n\tsetEvidence(stateIndex, o = {}) {\n\t\tlet nodeName = this.nodeName;\n\t\tlet evidence = {};\n\t\tlet nodeEl = this.el();\t\t\n    let allStateElem = nodeEl.querySelectorAll(\".state\");\n\n\t\tallStateElem.forEach((elem) => {\n\t\t\telem.style.backgroundColor = \"\";\n\t\t});\n\t\tnodeEl.style.boxShadow = \"\";\n\n\t\tif (nodeName in bn.evidence && bn.evidence[nodeName] == stateIndex) {\n\t\t\t//delete bn.evidence[nodeName];\n\t\t\tevidence[nodeName] = null;\n\t\t\tnodeEl.classList.remove('hasEvidence');\n\t\t\tlet influenceBars = nodeEl.querySelectorAll(\"span.barchange\");\n\t\t\tArray.from(influenceBars).forEach(elem => {\n\t\t\t\telem.style.width = \"0%\";\n\t\t\t})\n\t\t\tlet stateElem = nodeEl.querySelector(`div[data-index=\"${stateIndex}\"]`);\n\t\t\tif (!stateElem.classList.contains('istarget'))\n\t\t\t\tArray.from(stateElem.querySelectorAll(\":scope>span:not(.barParent)\")).forEach(elem=>\n\t\t\t\t\tArray.from(elem.classList).forEach(classname=> {\n\t\t\t\t\t\tif (classname.indexOf(\"influence-idx\") == 0)\n\t\t\t\t\t\t\telem.classList.remove(classname);\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t}\n\t\telse {\n\t\t\t//bn.evidence[nodeName] = state.dataset.index;\n\t\t\tevidence[nodeName] = stateIndex;\n\t\t\tthis.el().classList.add('hasEvidence');\n\t\t}\n\t\tif (o.update)  bn.update(evidence);\n\t}\n\t\n\tclearEvidence(o = {}) {\n\t\tdelete bn.evidence[this.nodeName];\n\t\tthis.el().classList.remove('hasEvidence');\n\t\tif (o.update)  bn.update(bn.evidence);\n\t}\n\t\n\t/*guiSetRole already does this\n\tguiSelectedStates() {\n\t\t\n\t}*/\n\t\n\tguiPopupMenu() {\n\t\tlet menu = new Menu({type:\"contextMenu\", items: [\n\t\t\tnew MenuAction('Make Cause', _=>{this.setRole('cause'); this.bn.update(); menu.dismiss()}),\n\t\t\tnew MenuAction('Make Effect', _=>{this.setRole('effect'); this.bn.update(); menu.dismiss()}),\n\t\t\tnew MenuAction('Clear Role', _=>{this.setRole(null); this.bn.update({[this.nodeName]:null}); menu.dismiss()}),\n\t\t]});\n\t\tlet {left,bottom} = this.el().querySelector('a.menu').getBoundingClientRect();\n\t\tmenu.popup({left,top:bottom});\n\t}\n\t\n\n\tstatic flashNode(nodeElement) {\n\t\tlet flashes = 2; \n\t\tlet flashDuration = 200;\n\t\tlet count = flashes * 2;\n\n\t\tfunction toggleFlash() {\n\t\t\tif (count > 0) {\n\t\t\t\tnodeElement.style.boxShadow = count % 2 === 0 ? '0 0 12px rgba(255,0,0,0.9)' : '';\n\t\t\t\tcount--;\n\t\t\t\tsetTimeout(toggleFlash, flashDuration);\n\t\t\t} \n\t\t\telse {\n\t\t\t\tnodeElement.style.boxShadow = \"0px 0px 12px rgba(255,0,0,0.9)\"\n\t\t\t}\n\t\t}\n\t\ttoggleFlash(); \t\t\n\t}\n\n\n\n\tstatic setFocusEvidence(nodeElement, bn) {\n\t\tnodeElement.classList.add(\"focusEvidence\");\t\t\n\t\tbn.focusEvidence = nodeElement.dataset.name;\n\t}\n\n\tstatic moveFocusEvidence(nodeElement,bn){\n\n\t\tnodeElement.classList.remove(\"focusEvidence\");\t\t\n\t\tbn.focusEvidence = nodeElement.dataset.name;\n\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n\n\n\t}\n\n\t\n\n\tstatic guiSetupEvents() {\n\t\tbn.initialize();\n\n\t\tconst controlsDiv = document.querySelector('.controls');\n\t\tconst headerDiv = document.querySelector('.header')\n\t\tconst verbalPart = document.querySelector('#verbalBox')\n\n\n\t\tif (!ShowMenu) {\n\t\t\tcontrolsDiv.style.display = 'none';\n\t\t\theaderDiv.style.display = 'none';\n\t\t} else {\n\t\t\tcontrolsDiv.style.display = 'block'; \n\t\t\theaderDiv.style.removeProperty('display')\n\t\t}\n\n\t\tif (!verbal) {\n\n\t\t\tverbalPart.style.display = 'none';\n\n\t\t} else {\n\t\t\tverbalPart.style.display = 'block'; \n\t\t}\n\n\t\tq(\".bnView\").addEventListener(\"click\", (event) => {\n\t\t\tconsole.log(\"move\");\n\t\t\tevent.stopPropagation();\n\t\t\tlet evidenceNodeTitle = event.target.closest('.node h3');\n\t\t\tlet focusEvidenceNode =  event.target.closest('.node');\n\n\t\t\tdocument.querySelectorAll(\".node h3\").forEach((nodeHeader) => {\n\t\t\t\tnodeHeader.addEventListener(\"mouseenter\", () => {\n\t\t\t\t\tnodeHeader.style.cursor = \"pointer\"; \n\t\t\t\t});\n\n\t\t\t\tnodeHeader.addEventListener(\"mouseleave\", () => {\n\t\t\t\t\tnodeHeader.style.cursor = \"default\"; \n\t\t\t\t});\n\t\t\t});\n\n\t\n\t\t\tif (evidenceNodeTitle && focusEvidenceNode.classList.contains(\"hasEvidence\")) {  \n\t\t\t\tconsole.log('evidenceNodeTitle', evidenceNodeTitle);\n\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n\t\t\n\t\t\t\tconst playButton = document.createElement(\"button\");\n\t\t\t\tplayButton.textContent = \"▶\";\n\t\t\t\tplayButton.className = \"play-button\";\n\t\t\t\tplayButton.style.position = \"absolute\";\n\t\t\n\t\t\t\tplayButton.addEventListener(\"click\", () => {\n\t\t\t\t\tconsole.log(\"Play Button Clicked!\");\n\t\t\t\t\tNode.flashNode(focusEvidenceNode);\n\t\t\t\t\tbn.update();\n\t\t\t\t});\n\t\t\n\t\t\t\tlet rect = evidenceNodeTitle.getBoundingClientRect();\n\t\t\t\tplayButton.style.left = `${window.scrollX + rect.left - 30}px`;\n\t\t\t\tplayButton.style.top = `${window.scrollY + rect.top + rect.height / 2}px`;\n\t\t\t\tplayButton.style.transform = \"translateY(-50%)\";\n\t\t\t\t\n\t\t\t\tdocument.body.appendChild(playButton);\n\t\t\t\tNode.flashNode(focusEvidenceNode);\n\t\t\n\t\t\t\tif (bn.detail === false) {\n\t\t\t\t\tconsole.log('--------CHANGING--------');\n\t\t\t\t\tNode.setFocusEvidence(focusEvidenceNode, bn);\n\t\t\t\t\tbn.detail = true;\n\t\t\t\t} else {\n\t\t\t\t\tbn.detail = false;\n\t\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n\t\t\t\t\tNode.moveFocusEvidence(focusEvidenceNode, bn);\n\t\t\t\t\tbn.update();\n\t\t\t\t}\n\t\t\n\t\t\t\tconst node = refs.Node(focusEvidenceNode);\n\t\t\t\tnode.bn.update();                                                                 \n\t\t\t} else {\n\n\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n\t\t\t}\n\t\t\t\t\t\n\t\t\t\n\t\t\tlet menuButton = event.target.closest(\"a.menu\");\n\t\t\tif (menuButton) {\n\t\t\t\trefs.Node(event.target).guiPopupMenu();\n\t\t\t}\n\t\t\tmenuButton = event.target.closest(\"a.setCause, a.setEffect\");\n\t\t\tif (menuButton) {\n\t\t\t\tlet node = refs.Node(event.target);\n\t\t\t\tif (menuButton.matches(\".on\")) {\n\t\t\t\t\tnode.setRole(null);\n\t\t\t\t\t/// Not sure why I was clearing evidence on this node?\n\t\t\t\t\t//node.bn.update({[node.nodeName]: null});\n\t\t\t\t\tnode.bn.update();\n\t\t\t\t} else if (menuButton.matches(\".setCause\")) {\n\t\t\t\t\tnode.setRole(\"cause\");\n\t\t\t\t\tnode.bn.update();\n\t\t\t\t} else if (menuButton.matches(\".setEffect\")) {\n\t\t\t\t\tnode.setRole(\"effect\");\n\t\t\t\t\tnode.bn.update();\n\t\t\t\t}\n\n\t\t\t\t/// Arrows need updating, and since there's an animation,\n\t\t\t\t/// least visually ugly thing to do is sync it with the animation\n\t\t\t\tlet arrowDraw;\n\t\t\t\tnode.el().addEventListener(\n\t\t\t\t\t\"transitionend\",\n\t\t\t\t\t(_) => {\n\t\t\t\t\t\tcancelAnimationFrame(arrowDraw);\n\t\t\t\t\t},\n\t\t\t\t\t{ once: true }\n\t\t\t\t);\n\t\t\t\tlet nextFrame = (_) => {\n\t\t\t\t\tdraw.updateArrows(document.querySelector(\".bnView\"));\n\t\t\t\t\tarrowDraw = requestAnimationFrame(nextFrame);\n\t\t\t\t};\n\t\t\t\tnextFrame();\n\t\t\t}\n\t\t});\n\n\t\n\n\t\tdocument.querySelectorAll(\".node\").forEach((setMoveEl) => {\n\t\t\tsetMoveEl.addEventListener(\"mousedown\", (event) => {\n\n\t\t\t\tconsole.log('dragfunc:',dragFunc)\n\t\t\t\tif (!dragFunc){\n\t\t\t\t\tconsole.log('Drag func disbaled')\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tconsole.log(\"Mousedown triggered\");\n\t\t\t\tlet target = event.target.closest(\".node\");\n\t\t\t\tconsole.log('target:', target);\n\t\t\t\t\n\n\t\t\t\tif (target) {\n\t\t\t\t\tlet targetNode = target.closest(\".node\");\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tconsole.log(\"start dragging\");\n\t\t\t\t\tconsole.log('targetNode.classList:', targetNode.classList);\n\n\t\t\t\t\t// define init pos\n\t\t\t\t\tlet origX = event.clientX,\n\t\t\t\t\t\torigY = event.clientY;\n\t\t\t\t\tlet origLeft = parseFloat(targetNode.style.left),\n\t\t\t\t\t\torigTop = parseFloat(targetNode.style.top);\n\t\t\t\t\tlet mm, mu;\n\n\t\t\t\t\tdocument.addEventListener(\n\t\t\t\t\t\t\"mousemove\",\n\t\t\t\t\t\t(mm = (event) => {\n\t\t\t\t\t\t\tlet deltaX = event.clientX - origX,\n\t\t\t\t\t\t\t\tdeltaY = event.clientY - origY;\n\t\t\t\t\t\t\t//onsole.log(origLeft, deltaX);\n\t\t\t\t\t\t\ttarget.style.cursor = 'grabbing';\n\t\t\t\t\t\t\ttargetNode.style.left = origLeft + deltaX + \"px\";\n\t\t\t\t\t\t\ttargetNode.style.top = origTop + deltaY + \"px\";\n\t\t\t\t\t\t\t/// Update with something more efficient\n\t\t\t\t\t\t\tdraw.updateArrows(document.querySelector(\".bnView\"));\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tdocument.addEventListener(\n\t\t\t\t\t\t\"mouseup\",\n\t\t\t\t\t\t(mu = (event) => {\n\t\t\t\t\t\t\ttarget.closest(\".bnView\").classList.remove(\"grabbing\");\n\t\t\t\t\t\t\t/// Update with something more efficient\n\t\t\t\t\t\t\tdraw.updateArrows(document.querySelector(\".bnView\"));\n\t\t\t\t\t\t\tdocument.removeEventListener(\"mousemove\", mm);\n\t\t\t\t\t\t\tdocument.removeEventListener(\"mouseup\", mu);\n\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction setupScenarioEvents() {\n\tlet scenarioBox = q('.scenario');\n\tlet saveScenario = q('.saveScenario');\n\tlet removeScenario = q('.removeScenario');\n\tlet renameScenario = q('.renameScenario');\n\t\n\tscenarioBox.addEventListener('input', async event => {\n\t\tlet opt = scenarioBox.options[scenarioBox.selectedIndex];\n\t\tif (opt.matches('.none')) {\n\t\t\t/// Clear scenario (evidence only? or roles as well?)\n\t\t\t//bn.update({});\n\t\t\tfor (let node of bn.model) {\n\t\t\t\tlet n = bn.getNode(node.name);\n\t\t\t\tn.clearEvidence();\n\t\t\t\tn.setRole(null);\n\t\t\t}\n\t\t\tbn.update(bn.evidence);\n\t\t}\n\t\telse {\n\t\t\t/// Load scenario\n\t\t\tlet scenario = JSON.parse(opt.dataset.scenario);\n\t\t\tconsole.log(scenario);\n\t\t\tfor (let node of bn.model) {\n\t\t\t\tlet n = bn.getNode(node.name);\n\t\t\t\tn.clearEvidence();\n\t\t\t\tn.setRole(null);\n\t\t\t\tif (scenario.evidence[node.name]) {\n\t\t\t\t\tbn.getNode(node.name).setEvidence(scenario.evidence[node.name]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (scenario.selectedStates) {\n\t\t\t\tbn.selectedStates = scenario.selectedStates;\n\t\t\t}\n\t\t\tif (scenario.roles)  for (let [role,nodeNames] of Object.entries(scenario.roles)) {\n\t\t\t\tfor (let nodeName of nodeNames) {\n\t\t\t\t\tbn.getNode(nodeName).setRole(role);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbn.update(scenario.evidence);\n\t\t}\n\t});\n\tsaveScenario.addEventListener('click', async event => {\n\t\tlet name = '';\n\t\tlet sep = '';\n\t\tfor (let [k,v] of Object.entries(bn.evidence)) {\n\t\t\tname += sep + `${k}=${v}`;\n\t\t\tsep = ', ';\n\t\t}\n\t\tif (!name) { name = '(No evidence)'; }\n\t\tlet upd = {evidence:bn.evidence, roles:bn.roles, selectedStates: bn.selectedStates, name};\n\t\tlet qs = getQs();\n\t\tlet res = await fetch('/bn?updateScenario=1&requestType=data&id='+qs.id, {method:'POST', body: JSON.stringify(upd), headers: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t}}).then(r => r.json());\n\t\tscenarioBox.append(n('option', upd.name, {value: res.scenarioId, dataScenario: JSON.stringify(upd)}));\n\t\tscenarioBox.value = res.scenarioId;\n\t});\n\tremoveScenario.addEventListener('click', event => {\n\t\tlet scenarioId = event.target.closest('.controls').querySelector('.scenario').value;\n\t\tlet qs = getQs();\n\t\tfetch('/bn?deleteScenario=1&requestType=data&id='+qs.id+'&scenarioId='+scenarioId, {method:'POST', headers: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t}});\n\t\tscenarioBox.querySelector(`[value=\"${scenarioId}\"]`).remove();\n\t});\n\trenameScenario.addEventListener('click', event => {\n\t\tlet scenarioId = event.target.closest('.controls').querySelector('.scenario').value;\n\t\tlet qs = getQs();\n\t\tlet opt = scenarioBox.querySelector(`[value=\"${scenarioId}\"]`);\n\t\tlet newName = prompt('New scenario name:', opt.text);\n\t\tlet upd = {name: newName};\n\t\tfetch('/bn?renameScenario=1&requestType=data&id='+qs.id+'&scenarioId='+scenarioId, {method:'POST', body: JSON.stringify(upd), headers: {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t}});\n\t\topt.text = newName;\n\t});\n}\n\ndocument.addEventListener('DOMContentLoaded', event => {\n\tlet showMenu = false; \n\tlet verbal = false;\n\tlet animation = false;\n\n\n\tconst siteLinksDiv = document.querySelector('.siteLinks');\n\n\tif (!showMenu) {\n\t\tsiteLinksDiv.remove(); \n\t} else {\n\t\tconst header = document.querySelector('.header');\n\t\tconst newDiv = document.createElement('div');\n\t\tnewDiv.className = 'siteLinks';\n\t\theader.appendChild(newDiv); \n\t}\n\n\n\twindow.bnDetail = new BnDetail;\n\tbnDetail.make(document.querySelector('.bnDetail'));\n\tdocument.querySelector('.bnView').addEventListener('click', async event => {\n\t\t\n\t\tlet target = event.target.closest('.target');\n\t\tif (target) {\n\t\t\t// target.classList.toggle('selected');\n\t\t\tlet possibleEvidenceNode = target.closest('.node.hasEvidence');\n\n\t\t\tif (!possibleEvidenceNode) {\n\t\t\t\tdocument.querySelectorAll(\".play-button\").forEach(button => button.remove());\n\t\t\t}\n\t\n\t\t\t\n\t\t\t// Don't react, if node is an evidence node\n\t\t\tif (possibleEvidenceNode)\n\t\t\t\treturn;\n\t\t\t\n\n\t\t\ttarget.closest('.state').classList.toggle('istarget');\n\t\t\ttarget.closest('.node').classList.toggle('istargetnode');\n\n\t\t\t// Add event listener to checkboxes\n\t\t\tdocument.querySelectorAll('.hiddencheckbox').forEach(checkbox => {\n\t\t\t\tcheckbox.addEventListener('change', function () {\n\t\t\t\t\t\tif (this.checked) {\n\t\t\n\t\t\t\t\t\t\t\t// Add 'not-checked' class to other checkboxes\n\t\t\t\t\t\t\t\tdocument.querySelectorAll('.hiddencheckbox').forEach(cb => {\n\t\t\t\t\t\t\t\t\t\tif (cb !== this) {\n\t\t\t\t\t\t\t\t\t\t\t\tcb.classList.add('not-checked');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Remove 'not-checked' class from other checkboxes\n\t\t\t\t\t\t\t\tdocument.querySelectorAll('.hiddencheckbox').forEach(cb => {\n\t\t\t\t\t\t\t\t\t\tcb.classList.remove('not-checked');\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tlet stateI = Number(target.closest('.state').dataset.index);\n\t\t\tlet nodeName = target.closest('.node').dataset.name;\n\t\t\tlet thisInput = target.querySelector('input');\n\t\t\tlet node = target.closest('.node');\n\t\t\t\n\t\t\t\n\t\t\t/// If shift key held, then allow multi-select; otherwise, clear old selects\n\t\t\t// if (!event.shiftKey) {\n\t\t\t// \tnode.querySelectorAll('.target input').forEach(i => i != thisInput && (i.checked = false));\n\t\t\t// }\n\t\t\t\n\t\t\tlet states = [...node.querySelectorAll('.state.istarget')].map(el => Number(el.closest('.state').dataset.index));\n\t\t\t\n\t\t\t// clean up if we have not target selected\n\t\t\tif (!states.length) {\n\t\t\t\tdelete bn.selectedStates[nodeName];\n\n\t\t\t\t// reset background colors for every evidence node \n\t\t\t\tArray.from(document.querySelectorAll(\"span.barchange\")).forEach(elem=>{\n\t\t\t\t\telem.style.width = \"\";\n\t\t\t\t\tArray.from(elem.classList).forEach(classname=> {\n\t\t\t\t\t\tif (classname.indexOf(\"influence-\") == 0)\n\t\t\t\t\t\t\telem.classList.remove(classname);\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\tArray.from(document.querySelectorAll(\".node span:not(.barParent)\")).forEach(elem=>\n\t\t\t\t\tArray.from(elem.classList).forEach(classname=> {\n\t\t\t\t\t\tif (classname.indexOf(\"influence-\") == 0)\n\t\t\t\t\t\t\telem.classList.remove(classname);\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbn.selectedStates[nodeName] = states;\n\t\t\t}\n\t\t\tif (Object.keys(bn.selectedStates).length > 0)\n\t\t\t\tbn.calculateTargetChange = true;\n\t\t\telse\n\t\t\t\tbn.calculateTargetChange = false;\n\t\t\t\t// bn.update(bn.evidence);\n\t\t\t\n\t\t\tif (Object.keys(bn.evidence).length > 0)\n\t\t\t\tbn.update(bn.evidence);\n\t\t\treturn;\n\t\t}\n\t\tlet state = event.target.closest('.state');\n\t\tif (state) {\n\t\t\trefs.Node(state).setEvidence(state.dataset.index, {update:true});\n\t\t\t/*let nodeName = state.closest('.node').dataset.name;\n\t\t\tlet evidence = {};\n\t\t\tif (nodeName in bn.evidence && bn.evidence[nodeName] == state.dataset.index) {\n\t\t\t\t//delete bn.evidence[nodeName];\n\t\t\t\tevidence[nodeName] = null;\n\t\t\t\tstate.closest('.node').classList.remove('hasEvidence');\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//bn.evidence[nodeName] = state.dataset.index;\n\t\t\t\tevidence[nodeName] = state.dataset.index;\n\t\t\t\tstate.closest('.node').classList.add('hasEvidence');\n\t\t\t}\n\t\t\tbn.update(evidence);*/\n\t\t}\n\t});\n\n\tsetupScenarioEvents();\n\t\n\tNode.guiSetupEvents();\n\t\n\tq('h1 .text').setAttribute('contenteditable', 'true');\n\tq('h1 .text').setAttribute('spellcheck', 'false');\n\t// q('button.save').addEventListener('click', event => {\n\t// \tlet doSave = async _=> {\n\t// \t\tlet qs = new URLSearchParams(location.search);\n\t// \t\tlet bnName = dlg.querySelector('[name=bnName]').value;\n\t// \t\tlet bnDescription = dlg.querySelector('[name=description]').value;\n\t// \t\tbnDetail.$handleUpdate({title: bnName, temporary: false});\n\t// \t\tlet fd = new FormData();\n\t// \t\tfd.append('name', bnName);\n\t// \t\tfd.append('description', bnDescription);\n\t// \t\tfd.append('key', qs.get('tempId'));\n\t// \t\tfd.append('type', qs.get('type'));\n\t// \t\tui.dismissDialogs();\n\t// \t\tlet res = await fetch('/upload?step=2&requestType=data', {method:'POST', body: fd}).then(r => r.json());\n\t// \t\tlet usp = new URLSearchParams({id: res.id});\n\t// \t\thistory.replaceState(null, '', '?'+usp.toString());\n\t// \t};\n\t// \tlet dlg = ui.popupDialog([\n\t// \t\tn('h2', 'Save BN'),\n\t// \t\tn('div',\n\t// \t\t\tn('label', 'Name:'),\n\t// \t\t\tn('input', {type: 'text', name: 'bnName', value: q('h1 .text').textContent}),\n\t// \t\t),\n\t// \t\tn('div',\n\t// \t\t\tn('textarea', {name:'description', placeholder: 'Description'}),\n\t// \t\t),\n\t// \t], {buttons: [\n\t// \t\tn('button.save', 'Save', {on: {click: doSave}}),\n\t// \t\tn('button.cancel', 'Cancel', {on:{click:ui.dismissDialogs}}),\n\t// \t]});\n\t// \tq(dlg).querySelector('[name=bnName]').select().focus();\n\t// });\n\tq('button.publish').addEventListener('click', event => {\n\t\tlet doPublish = async _=> {\n\t\t\tlet qs = new URLSearchParams(location.search);\n\t\t\tlet res = await fetch('/bn?requestType=data&updateBn=1', {method:'POST',\n\t\t\t\tbody: q(new FormData).append('updates', JSON.stringify({visibility:'public',id: qs.get('id')})).unchain()\n\t\t\t});\n\t\t\tbnDetail.$handleUpdate({visibility:'public'});\n\t\t\tui.dismissDialogs();\n\t\t};\n\t\tlet dlg = ui.popupDialog([\n\t\t\tn('h2', 'Publish BN'),\n\t\t], {buttons: [\n\t\t\tn('button.doPublish', 'Publish', {on: {click: doPublish}}),\n\t\t\tn('button.cancel', 'Cancel', {on: {click:ui.dismissDialogs}}),\n\t\t]});\n\t});\n\t// q('button.downloadpng').addEventListener('click', () => {\n\t// \tlet scaling = q('select.scaleimage').value\n\t// \trender.Network(Number(scaling), \"png\");\n\t// })\n\t// q('button.savesnapshot').addEventListener('click', () => {\n\t// \tbnDetail.saveSnapshot()\n\t// })\n\tq('button.downloadsvg').addEventListener('click', () => {\n\t\tlet scaling = q('select.scaleimage').value\n\t\trender.Network(Number(scaling), \"svg\");\n\t})\n\t// q('button.downloadbase64').addEventListener('click', () => {\n\t// \tlet scaling = q('select.scaleimage').value\n\t// \trender.Network(Number(scaling), \"base64\");\n\t// })\n\tq('input.influence-as-frame').addEventListener('click', (event) => {\n\t\tbnDetail.drawFrame = event.target.checked\n\t\tbnDetail.$handleUpdate({updateFrameMode:\"\"});\n\t})\n\tq('input.influence-target-node').addEventListener('click', (event) => {\n\t\tbnDetail.onlyTargetNode = event.target.checked\n\t\tbnDetail.$handleUpdate({updateShowBarChange:\"\"});\n\t})\n\n\tdocument.querySelector('button.frozen-mode').addEventListener('click', function() {\n\t\tif (!bn.isFrozen) {\n\t\t\tbn.isFrozen = true;\n\t\t\tdocument.querySelector(\".bnView\").classList.add(\"frozen\");\n\t\t\tthis.classList.add('frozen_box'); \n\n\t\t} else {\n\t\t\tbn.isFrozen = false;\n\t\t\tconsole.log(\"Frozen Mode: Only Play Button is clickable.\");\n\t\t\tdocument.querySelector(\".bnView\").classList.remove(\"frozen\");\n\t\t\tthis.classList.remove('frozen_box');\n\t\t\tlet verbalBox = document.querySelector(\"#verbalBox\");\n\t\t\tif (verbalBox) {\n\t\t\t\tverbalBox.classList.add(\"influenceContainer\");\n\t\t\t\tconsole.log(\"Frozen Mode: verbalBox class remains:\", verbalBox.classList);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\n\t});\n\n});\n\n\n\n\n\nfunction onMouseUp() {\n  isDragging = false;\n\n  document.removeEventListener('mousemove', onMouseMove);\n  document.removeEventListener('mouseup', onMouseUp);\n}\n\n// drag and drop\ndocument.addEventListener('DOMContentLoaded', (event) => {\n\n\tfunction handleDragEnter(e) {\n\t  this.classList.add('over');\n\n\t  this.currentZoom = Math.trunc((window.outerWidth-10)/window.innerWidth*100)/100\n\t}\n  \n\tfunction handleDragLeave(e) {\n\t  this.classList.remove('over');\n\t}\n\n\n\tfunction handleDragMove(e) {\n\t\tif (this.classList.contains('over')) {\n\t\t\t// console.log(e.movementX, e.movementY, window.devicePixelRatio, e.movementX / window.devicePixelRatio)\n\t\t\tlet matrix = new WebKitCSSMatrix(window.getComputedStyle(this).getPropertyValue('transform'))\n\t\t\tlet moved = matrix.translate(e.movementX /  this.currentZoom, e.movementY /  this.currentZoom)\n\t\t\tthis.style.transform = moved.toString()\n\t\t}\n\t\t\n\t}\n\t\n  \n\tlet items = document.querySelector('.evidence-scale');\n\titems.onmousedown = handleDragEnter\n\titems.onmouseup = handleDragLeave\n\titems.onmouseleave = handleDragLeave\n\titems.onmousemove = handleDragMove\n\n\tlet verbalBox = document.querySelector('.influenceContainer');\n\tverbalBox.onmousedown = handleDragEnter\n\tverbalBox.onmouseup = handleDragLeave\n\tverbalBox.onmouseleave = handleDragLeave\n\tverbalBox.onmousemove = handleDragMove\n});\n\n\n\n"
        }
    ]
}